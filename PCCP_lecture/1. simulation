# Simulation

4방향 탐색

- 동서남북 좌표 순으로 **방향 배열**을 생성해 값을 미리 정의

```java
// 방향 배열
dx = {-1, 0, 1, 0}
dy = {0, 1, 0, -1}
```
    - 용어는 주로 
        - row, column를 칭하는 dr, dc
        - x, y로 구분하는 dx, dy
        를 사용한다

- 4 방향을 for문 돌면서 탐색
```java
board[i][j] 

// i : 행 
// j : 열
```

- 응용 -> 8방향으로 나올 수 있다

Q1. 웅덩이
- 5*5 숫자 배열 제공
- 배열을 탐색하면서 상하좌우 인접한 지역의 숫자가 모두 자신보다 클 경우를 counting
(time 38 ~ 48)
input ->
```java

```

Q2. 안전지대
https://school.programmers.co.kr/learn/courses/30/lessons/120866
(time 1h)
```java
class Solution {
    
    // 8th direction
    int[] dx = {0, 1, 1, 1, 0, -1, -1, -1};
    int[] dy = {-1, -1, 0, 1, 1, 1, 0, -1};
    
    public int solution(int[][] board) {
        int answer = 0;
        
        for (int i=0; i<board.length; i++) {
            for (int j=0; j<board[0].length; j++) {
                if (board[i][j] == 1) {
                    answer += check(i, j, board);
                }
            }
        }
        
        
        return (board.length*board[0].length) - answer;
    }
    
    int check(int i, int j, int[][] board) {
        int bomb = 1;
        for (int k=0; k<8; k++) {
            int checkX = i+dx[k];
            int checkY = j+dy[k];
            
            if (isBoundary(checkX, checkY, board)) {
                if (board[checkX][checkY] == 0) {
                    bomb ++;    
                    board[checkX][checkY] = -1;
                }
            }        
        }
        return bomb;
    }
    
    boolean isBoundary(int i, int j, int[][] board) {
        if (i < 0 || i >= board.length) return false;
        if (j < 0 || j >= board[0].length) return false;
        
        return true;
    }
}
```

Q3. 청소 로봇 (ver 1)
(time 1:30 ~)
```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class Solution {

    @Test
    void test01() {
        Assertions.assertArrayEquals(new int[]{2, 2}, cleanRobot01("RRRDDDLU"));
        Assertions.assertArrayEquals(new int[]{5, 1}, cleanRobot01("DDDRRRDDLL"));
        Assertions.assertArrayEquals(new int[]{4, 3}, cleanRobot01("RRRRRRDDDDDDUULLL"));
        Assertions.assertArrayEquals(new int[]{3, 4}, cleanRobot01("RRRRDDDRRDDLLUU"));
    }

    Map<Character, int[]> order = new HashMap<>() {{
       put('U', new int[]{-1, 0});
       put('R', new int[]{0, 1});
       put('L', new int[]{0, -1});
       put('D', new int[]{1, 0});
    }};

    int[] cleanRobot01(String moving) {
        int x = 0;
        int y = 0;

        for (char turn : moving.toCharArray()) {
            int[] move =order.get(turn);

            x += move[0];
            y += move[1];
        }

        return new int[]{x, y};
    }
}

```

Q4. 청소 로봇 (ver 2)
(time 2h ~)


Q5. 로봇의 이동
```java
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class Solution {

    @Test
    void test03() {
        Assertions.assertArrayEquals(new int[]{3, 3}, movingRobot("GGGRGGG"));
        Assertions.assertArrayEquals(new int[]{3, 2}, movingRobot("GGRGGG"));
        Assertions.assertArrayEquals(new int[]{0, 2}, movingRobot("GGGGGGGRGGGRGGRGGGLGGG"));
        Assertions.assertArrayEquals(new int[]{1, 5}, movingRobot("GGLLLGLGGG"));
    }

    int[] dx = {-1, 0, 1, 0};
    int[] dy = {0, 1, 0, -1};

    int[] movingRobot(String moving) {

        int x = 0;
        int y = 0;

        int index = 1;      // init Right side

        for (char m : moving.toCharArray()) {
            if (m == 'G') {
                x += dx[index];
                y += dy[index];
            } else if (m == 'R')
                index = (index == 3)? 0 : (index + 1);      // 정방향 +1
            else
                index = (index == 0)? 3 : (index - 1);      // 역방향 -1
        }
        return new int[]{x, y};
    }
}

```


Q6. 청소 로봇 (ver 3)
(time 2h30 ~)